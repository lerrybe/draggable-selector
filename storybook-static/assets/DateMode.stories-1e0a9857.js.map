{"version":3,"file":"DateMode.stories-1e0a9857.js","sources":["../../docs/components/SampleDateMode.tsx"],"sourcesContent":["import { useState } from 'react';\nimport styled from '@emotion/styled';\n\nimport Calendar from './Calendar';\nimport TimeSelector from './TimeSelector';\nimport TimeUnitSelector from './TimeUnitSelector';\nimport { DraggableSelector, TimeSlot } from '../../src';\n\nexport default function SampleDateMode({\n  slotWidth = 62,\n  slotHeight = 18,\n  slotsMarginTop = 11,\n  slotsMarginLeft = 20,\n  maxWidth = '546px',\n  maxHeight = '452px',\n  defaultSlotColor = '#FFFFFF',\n  selectedSlotColor = '#b3c6d3',\n  disabledSlotColor = '#e1e1e1',\n  hoveredSlotColor = '#eef2f6',\n  slotsContainerBorder = '1px solid #8c8d94',\n  slotsContainerBorderRadius = '0px',\n  dateFormat = 'MM.DD',\n  timeFormat = 'HH:mm A',\n}: {\n  /*\n   * Use the date format method of dayjs. You can use the following link to set the formatting form. (https://day.js.org/docs/en/display/format), `string`. e.g. `MM.DD`, `YYYY-MM-DD`\n   */\n  dateFormat?: string;\n  /*\n   Use the time format method of dayjs. You can use the following link to set the formatting form. (https://day.js.org/docs/en/display/format), `string`. e.g. `HH:mm A`, `HH:mm`\n   */\n  timeFormat?: string;\n  /*\n   * The width of each slot. Assign the value in `number`.\n   */\n  slotWidth?: number;\n  /*\n   * The height of each slot. Assign the value in `number`.\n   */\n  slotHeight?: number;\n  /*\n   * The margin-top of slots container. Assign the value in `number`.\n   */\n  slotsMarginTop?: number;\n  /*\n   * The margin-left of slots container. Assign the value in `number`.\n   */\n  slotsMarginLeft?: number;\n  /*\n   * The max-width of selector. Assign the value in `string`. e.g. `536px`\n   */\n  maxWidth?: string;\n  /*\n   * The max-height of selector. Assign the value in `string`. e.g. `452px`, `100%`\n   */\n  maxHeight?: string;\n  /*\n   * The default color of each slot. Assign the value in `string`. e.g. `#FFFFFF`\n   */\n  defaultSlotColor?: string;\n  /*\n   * The color of each slot when it is selected. Assign the value in `string`. e.g. `#FFF5E5`\n   */\n  selectedSlotColor?: string;\n  /*\n   * The color of each slot when it is disabled. Assign the value in `string`. e.g. `#e1e1e1`\n   */\n  disabledSlotColor?: string;\n  /*\n   * The color of each slot when it is hovered. Assign the value in `string`. e.g. `#FFF5E5`\n   */\n  hoveredSlotColor?: string;\n  /*\n   * The border of slots container. Assign the value in `string`. e.g. `1px solid #8c8d94`\n   */\n  slotsContainerBorder?: string;\n  /*\n   * The border-radius of slots container. Assign the value in `string`. e.g. `0px`, `5px`\n   */\n  slotsContainerBorderRadius?: string;\n}) {\n  type TimeUnit = 5 | 10 | 15 | 20 | 30 | 60;\n  const today = new Date();\n  const [minTime, setMinTime] = useState<string>('11:00');\n  const [maxTime, setMaxTime] = useState<string>('19:00');\n  const [timeUnit, setTimeUnit] = useState<TimeUnit>(30);\n  const [dates, setDates] = useState<Date[]>([\n    new Date(today.getFullYear(), today.getMonth(), today.getDate()),\n    new Date(today.getFullYear(), today.getMonth(), today.getDate() + 1),\n    new Date(today.getFullYear(), today.getMonth(), today.getDate() + 2),\n    new Date(today.getFullYear(), today.getMonth(), today.getDate() + 3),\n    new Date(today.getFullYear(), today.getMonth(), today.getDate() + 4),\n    new Date(today.getFullYear(), today.getMonth(), today.getDate() + 5),\n  ]);\n  const [selectedTimeSlots, setSelectedTimeSlots] = useState<TimeSlot[]>([]);\n\n  return (\n    <OuterContainer>\n      <SelectorContainer>\n        <TitleContainer>\n          <ComponentTitle>* DraggableSelector</ComponentTitle>\n        </TitleContainer>\n        <DraggableSelector\n          dates={dates}\n          minTime={Number(minTime.split(':')[0])}\n          maxTime={Number(maxTime.split(':')[0])}\n          timeSlots={selectedTimeSlots}\n          setTimeSlots={setSelectedTimeSlots}\n          mode={'date'}\n          timeUnit={timeUnit}\n          dateFormat={dateFormat}\n          timeFormat={timeFormat}\n          slotWidth={slotWidth}\n          slotHeight={slotHeight}\n          slotsMarginTop={slotsMarginTop}\n          slotsMarginLeft={slotsMarginLeft}\n          maxWidth={maxWidth}\n          maxHeight={maxHeight}\n          defaultSlotColor={defaultSlotColor}\n          selectedSlotColor={selectedSlotColor}\n          disabledSlotColor={disabledSlotColor}\n          hoveredSlotColor={hoveredSlotColor}\n          slotsContainerBorder={slotsContainerBorder}\n          slotsContainerBorderRadius={slotsContainerBorderRadius}\n        />\n      </SelectorContainer>\n\n      <ControlContainer>\n        <TitleContainer>\n          <ControlTitle>{`* Control Ex.`}</ControlTitle>\n          <Mode>{'(not provided)'}</Mode>\n        </TitleContainer>\n\n        <TimeUnitSelector timeUnit={timeUnit} setTimeUnit={setTimeUnit} />\n        <TimeSelector maxTime={maxTime} minTime={minTime} setMaxTime={setMaxTime} setMinTime={setMinTime} />\n        <Calendar dates={dates} setDates={setDates} />\n      </ControlContainer>\n    </OuterContainer>\n  );\n}\n\n// styles\nconst OuterContainer = styled.div`\n  display: flex;\n  padding: 20px 30px 20px 0;\n  justify-content: space-evenly;\n  min-width: 870px;\n  width: 100%;\n`;\n\nconst SelectorContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n`;\n\nconst ControlContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n  margin-left: 20px;\n  gap: 20px;\n`;\n\nconst Mode = styled.h1`\n  font-size: 14px;\n  font-weight: 700;\n  font-family: 'SBAggroB', sans-serif;\n  display: flex;\n  align-items: flex-end;\n  margin-left: 10px;\n`;\n\nconst TitleContainer = styled.div`\n  display: flex;\n  align-items: flex-end;\n  width: 100%;\n  margin-bottom: 40px;\n`;\n\nconst ComponentTitle = styled.h1`\n  font-size: 26px;\n  font-weight: 700;\n  font-family: 'SBAggroB', sans-serif;\n  background-color: rgba(30, 167, 253, 0.21);\n`;\n\nconst ControlTitle = styled.h1`\n  font-size: 20px;\n  font-weight: 700;\n  font-family: 'SBAggroB', sans-serif;\n  background-color: rgba(255, 117, 146, 0.29);\n`;\n"],"names":["SampleDateMode","slotWidth","slotHeight","slotsMarginTop","slotsMarginLeft","maxWidth","maxHeight","defaultSlotColor","selectedSlotColor","disabledSlotColor","hoveredSlotColor","slotsContainerBorder","slotsContainerBorderRadius","dateFormat","timeFormat","today","minTime","setMinTime","useState","maxTime","setMaxTime","timeUnit","setTimeUnit","dates","setDates","selectedTimeSlots","setSelectedTimeSlots","jsxs","OuterContainer","SelectorContainer","jsx","TitleContainer","ComponentTitle","DraggableSelector","ControlContainer","ControlTitle","Mode","TimeUnitSelector","TimeSelector","Calendar","styled"],"mappings":"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"}